/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: client_server.proto */

#ifndef PROTOBUF_C_client_5fserver_2eproto__INCLUDED
#define PROTOBUF_C_client_5fserver_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct HeaderMessage HeaderMessage;
typedef struct ProtoDisplayMessage ProtoDisplayMessage;
typedef struct RoachConnectReq RoachConnectReq;
typedef struct WaspConnectReq WaspConnectReq;
typedef struct BotConnectResp BotConnectResp;
typedef struct BotMovementReq BotMovementReq;
typedef struct BotMovementResp BotMovementResp;
typedef struct BotDisconnectReq BotDisconnectReq;
typedef struct BotDisconnectResp BotDisconnectResp;
typedef struct LizardConnectReq LizardConnectReq;
typedef struct LizardConnectResp LizardConnectResp;
typedef struct LizardMovementReq LizardMovementReq;
typedef struct LizardMovementResp LizardMovementResp;
typedef struct LizardDisconnectReq LizardDisconnectReq;
typedef struct LizardDisconnectResp LizardDisconnectResp;


/* --- enums --- */

typedef enum _Direction {
  DIRECTION__UP = 0,
  DIRECTION__DOWN = 1,
  DIRECTION__LEFT = 2,
  DIRECTION__RIGHT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DIRECTION)
} Direction;
typedef enum _MessageType {
  MESSAGE_TYPE__CONNECT = 0,
  MESSAGE_TYPE__MOVEMENT = 1,
  MESSAGE_TYPE__DISCONNECT = 2,
  MESSAGE_TYPE__REQUEST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE)
} MessageType;
typedef enum _ClientType {
  CLIENT_TYPE__LIZARD = 0,
  CLIENT_TYPE__ROACH = 1,
  CLIENT_TYPE__WASP = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_TYPE)
} ClientType;
typedef enum _Response {
  RESPONSE__SUCCESS = 0,
  RESPONSE__NOTHING = 1,
  RESPONSE__FAILURE = 2,
  RESPONSE__TIMEOUT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESPONSE)
} Response;

/* --- messages --- */

struct  HeaderMessage
{
  ProtobufCMessage base;
  ClientType client_type;
  MessageType msg_type;
};
#define HEADER__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&header__message__descriptor) \
, CLIENT_TYPE__LIZARD, MESSAGE_TYPE__CONNECT }


struct  ProtoDisplayMessage
{
  ProtobufCMessage base;
  uint32_t ch;
  int64_t pos_x;
  int64_t pos_y;
};
#define PROTO__DISPLAY__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&proto__display__message__descriptor) \
, 0, 0, 0 }


struct  RoachConnectReq
{
  ProtobufCMessage base;
  /*
   * array of digit of the roaches controlled by the client
   */
  size_t n_roach_digit;
  uint32_t *roach_digit;
};
#define ROACH__CONNECT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&roach__connect__req__descriptor) \
, 0,NULL }


struct  WaspConnectReq
{
  ProtobufCMessage base;
  /*
   * number of wasps controlled by the client
   */
  uint32_t num_wasps;
};
#define WASP__CONNECT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wasp__connect__req__descriptor) \
, 0 }


struct  BotConnectResp
{
  ProtobufCMessage base;
  /*
   * array of id of the bots controlled by the client
   */
  size_t n_bot_id;
  uint32_t *bot_id;
  uint64_t token;
  uint32_t client_id;
};
#define BOT__CONNECT__RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bot__connect__resp__descriptor) \
, 0,NULL, 0, 0 }


struct  BotMovementReq
{
  ProtobufCMessage base;
  uint32_t bot_id;
  uint64_t token;
  Direction direction;
  uint32_t client_id;
};
#define BOT__MOVEMENT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bot__movement__req__descriptor) \
, 0, 0, DIRECTION__UP, 0 }


struct  BotMovementResp
{
  ProtobufCMessage base;
  Response resp;
};
#define BOT__MOVEMENT__RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bot__movement__resp__descriptor) \
, RESPONSE__SUCCESS }


struct  BotDisconnectReq
{
  ProtobufCMessage base;
  uint32_t client_id;
  uint64_t token;
};
#define BOT__DISCONNECT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bot__disconnect__req__descriptor) \
, 0, 0 }


struct  BotDisconnectResp
{
  ProtobufCMessage base;
  Response resp;
};
#define BOT__DISCONNECT__RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bot__disconnect__resp__descriptor) \
, RESPONSE__SUCCESS }


struct  LizardConnectReq
{
  ProtobufCMessage base;
  protobuf_c_boolean has_null;
  ProtobufCBinaryData null;
};
#define LIZARD__CONNECT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__connect__req__descriptor) \
, 0, {0,NULL} }


struct  LizardConnectResp
{
  ProtobufCMessage base;
  ProtobufCBinaryData ch;
  uint64_t token;
};
#define LIZARD__CONNECT__RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__connect__resp__descriptor) \
, {0,NULL}, 0 }


struct  LizardMovementReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData ch;
  uint64_t token;
  Direction direction;
};
#define LIZARD__MOVEMENT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__movement__req__descriptor) \
, {0,NULL}, 0, DIRECTION__UP }


struct  LizardMovementResp
{
  ProtobufCMessage base;
  Response resp;
};
#define LIZARD__MOVEMENT__RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__movement__resp__descriptor) \
, RESPONSE__SUCCESS }


struct  LizardDisconnectReq
{
  ProtobufCMessage base;
  ProtobufCBinaryData ch;
  uint64_t token;
};
#define LIZARD__DISCONNECT__REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__disconnect__req__descriptor) \
, {0,NULL}, 0 }


struct  LizardDisconnectResp
{
  ProtobufCMessage base;
  uint64_t score;
};
#define LIZARD__DISCONNECT__RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__disconnect__resp__descriptor) \
, 0 }


/* HeaderMessage methods */
void   header__message__init
                     (HeaderMessage         *message);
size_t header__message__get_packed_size
                     (const HeaderMessage   *message);
size_t header__message__pack
                     (const HeaderMessage   *message,
                      uint8_t             *out);
size_t header__message__pack_to_buffer
                     (const HeaderMessage   *message,
                      ProtobufCBuffer     *buffer);
HeaderMessage *
       header__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   header__message__free_unpacked
                     (HeaderMessage *message,
                      ProtobufCAllocator *allocator);
/* ProtoDisplayMessage methods */
void   proto__display__message__init
                     (ProtoDisplayMessage         *message);
size_t proto__display__message__get_packed_size
                     (const ProtoDisplayMessage   *message);
size_t proto__display__message__pack
                     (const ProtoDisplayMessage   *message,
                      uint8_t             *out);
size_t proto__display__message__pack_to_buffer
                     (const ProtoDisplayMessage   *message,
                      ProtobufCBuffer     *buffer);
ProtoDisplayMessage *
       proto__display__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   proto__display__message__free_unpacked
                     (ProtoDisplayMessage *message,
                      ProtobufCAllocator *allocator);
/* RoachConnectReq methods */
void   roach__connect__req__init
                     (RoachConnectReq         *message);
size_t roach__connect__req__get_packed_size
                     (const RoachConnectReq   *message);
size_t roach__connect__req__pack
                     (const RoachConnectReq   *message,
                      uint8_t             *out);
size_t roach__connect__req__pack_to_buffer
                     (const RoachConnectReq   *message,
                      ProtobufCBuffer     *buffer);
RoachConnectReq *
       roach__connect__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   roach__connect__req__free_unpacked
                     (RoachConnectReq *message,
                      ProtobufCAllocator *allocator);
/* WaspConnectReq methods */
void   wasp__connect__req__init
                     (WaspConnectReq         *message);
size_t wasp__connect__req__get_packed_size
                     (const WaspConnectReq   *message);
size_t wasp__connect__req__pack
                     (const WaspConnectReq   *message,
                      uint8_t             *out);
size_t wasp__connect__req__pack_to_buffer
                     (const WaspConnectReq   *message,
                      ProtobufCBuffer     *buffer);
WaspConnectReq *
       wasp__connect__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wasp__connect__req__free_unpacked
                     (WaspConnectReq *message,
                      ProtobufCAllocator *allocator);
/* BotConnectResp methods */
void   bot__connect__resp__init
                     (BotConnectResp         *message);
size_t bot__connect__resp__get_packed_size
                     (const BotConnectResp   *message);
size_t bot__connect__resp__pack
                     (const BotConnectResp   *message,
                      uint8_t             *out);
size_t bot__connect__resp__pack_to_buffer
                     (const BotConnectResp   *message,
                      ProtobufCBuffer     *buffer);
BotConnectResp *
       bot__connect__resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bot__connect__resp__free_unpacked
                     (BotConnectResp *message,
                      ProtobufCAllocator *allocator);
/* BotMovementReq methods */
void   bot__movement__req__init
                     (BotMovementReq         *message);
size_t bot__movement__req__get_packed_size
                     (const BotMovementReq   *message);
size_t bot__movement__req__pack
                     (const BotMovementReq   *message,
                      uint8_t             *out);
size_t bot__movement__req__pack_to_buffer
                     (const BotMovementReq   *message,
                      ProtobufCBuffer     *buffer);
BotMovementReq *
       bot__movement__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bot__movement__req__free_unpacked
                     (BotMovementReq *message,
                      ProtobufCAllocator *allocator);
/* BotMovementResp methods */
void   bot__movement__resp__init
                     (BotMovementResp         *message);
size_t bot__movement__resp__get_packed_size
                     (const BotMovementResp   *message);
size_t bot__movement__resp__pack
                     (const BotMovementResp   *message,
                      uint8_t             *out);
size_t bot__movement__resp__pack_to_buffer
                     (const BotMovementResp   *message,
                      ProtobufCBuffer     *buffer);
BotMovementResp *
       bot__movement__resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bot__movement__resp__free_unpacked
                     (BotMovementResp *message,
                      ProtobufCAllocator *allocator);
/* BotDisconnectReq methods */
void   bot__disconnect__req__init
                     (BotDisconnectReq         *message);
size_t bot__disconnect__req__get_packed_size
                     (const BotDisconnectReq   *message);
size_t bot__disconnect__req__pack
                     (const BotDisconnectReq   *message,
                      uint8_t             *out);
size_t bot__disconnect__req__pack_to_buffer
                     (const BotDisconnectReq   *message,
                      ProtobufCBuffer     *buffer);
BotDisconnectReq *
       bot__disconnect__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bot__disconnect__req__free_unpacked
                     (BotDisconnectReq *message,
                      ProtobufCAllocator *allocator);
/* BotDisconnectResp methods */
void   bot__disconnect__resp__init
                     (BotDisconnectResp         *message);
size_t bot__disconnect__resp__get_packed_size
                     (const BotDisconnectResp   *message);
size_t bot__disconnect__resp__pack
                     (const BotDisconnectResp   *message,
                      uint8_t             *out);
size_t bot__disconnect__resp__pack_to_buffer
                     (const BotDisconnectResp   *message,
                      ProtobufCBuffer     *buffer);
BotDisconnectResp *
       bot__disconnect__resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bot__disconnect__resp__free_unpacked
                     (BotDisconnectResp *message,
                      ProtobufCAllocator *allocator);
/* LizardConnectReq methods */
void   lizard__connect__req__init
                     (LizardConnectReq         *message);
size_t lizard__connect__req__get_packed_size
                     (const LizardConnectReq   *message);
size_t lizard__connect__req__pack
                     (const LizardConnectReq   *message,
                      uint8_t             *out);
size_t lizard__connect__req__pack_to_buffer
                     (const LizardConnectReq   *message,
                      ProtobufCBuffer     *buffer);
LizardConnectReq *
       lizard__connect__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__connect__req__free_unpacked
                     (LizardConnectReq *message,
                      ProtobufCAllocator *allocator);
/* LizardConnectResp methods */
void   lizard__connect__resp__init
                     (LizardConnectResp         *message);
size_t lizard__connect__resp__get_packed_size
                     (const LizardConnectResp   *message);
size_t lizard__connect__resp__pack
                     (const LizardConnectResp   *message,
                      uint8_t             *out);
size_t lizard__connect__resp__pack_to_buffer
                     (const LizardConnectResp   *message,
                      ProtobufCBuffer     *buffer);
LizardConnectResp *
       lizard__connect__resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__connect__resp__free_unpacked
                     (LizardConnectResp *message,
                      ProtobufCAllocator *allocator);
/* LizardMovementReq methods */
void   lizard__movement__req__init
                     (LizardMovementReq         *message);
size_t lizard__movement__req__get_packed_size
                     (const LizardMovementReq   *message);
size_t lizard__movement__req__pack
                     (const LizardMovementReq   *message,
                      uint8_t             *out);
size_t lizard__movement__req__pack_to_buffer
                     (const LizardMovementReq   *message,
                      ProtobufCBuffer     *buffer);
LizardMovementReq *
       lizard__movement__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__movement__req__free_unpacked
                     (LizardMovementReq *message,
                      ProtobufCAllocator *allocator);
/* LizardMovementResp methods */
void   lizard__movement__resp__init
                     (LizardMovementResp         *message);
size_t lizard__movement__resp__get_packed_size
                     (const LizardMovementResp   *message);
size_t lizard__movement__resp__pack
                     (const LizardMovementResp   *message,
                      uint8_t             *out);
size_t lizard__movement__resp__pack_to_buffer
                     (const LizardMovementResp   *message,
                      ProtobufCBuffer     *buffer);
LizardMovementResp *
       lizard__movement__resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__movement__resp__free_unpacked
                     (LizardMovementResp *message,
                      ProtobufCAllocator *allocator);
/* LizardDisconnectReq methods */
void   lizard__disconnect__req__init
                     (LizardDisconnectReq         *message);
size_t lizard__disconnect__req__get_packed_size
                     (const LizardDisconnectReq   *message);
size_t lizard__disconnect__req__pack
                     (const LizardDisconnectReq   *message,
                      uint8_t             *out);
size_t lizard__disconnect__req__pack_to_buffer
                     (const LizardDisconnectReq   *message,
                      ProtobufCBuffer     *buffer);
LizardDisconnectReq *
       lizard__disconnect__req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__disconnect__req__free_unpacked
                     (LizardDisconnectReq *message,
                      ProtobufCAllocator *allocator);
/* LizardDisconnectResp methods */
void   lizard__disconnect__resp__init
                     (LizardDisconnectResp         *message);
size_t lizard__disconnect__resp__get_packed_size
                     (const LizardDisconnectResp   *message);
size_t lizard__disconnect__resp__pack
                     (const LizardDisconnectResp   *message,
                      uint8_t             *out);
size_t lizard__disconnect__resp__pack_to_buffer
                     (const LizardDisconnectResp   *message,
                      ProtobufCBuffer     *buffer);
LizardDisconnectResp *
       lizard__disconnect__resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__disconnect__resp__free_unpacked
                     (LizardDisconnectResp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HeaderMessage_Closure)
                 (const HeaderMessage *message,
                  void *closure_data);
typedef void (*ProtoDisplayMessage_Closure)
                 (const ProtoDisplayMessage *message,
                  void *closure_data);
typedef void (*RoachConnectReq_Closure)
                 (const RoachConnectReq *message,
                  void *closure_data);
typedef void (*WaspConnectReq_Closure)
                 (const WaspConnectReq *message,
                  void *closure_data);
typedef void (*BotConnectResp_Closure)
                 (const BotConnectResp *message,
                  void *closure_data);
typedef void (*BotMovementReq_Closure)
                 (const BotMovementReq *message,
                  void *closure_data);
typedef void (*BotMovementResp_Closure)
                 (const BotMovementResp *message,
                  void *closure_data);
typedef void (*BotDisconnectReq_Closure)
                 (const BotDisconnectReq *message,
                  void *closure_data);
typedef void (*BotDisconnectResp_Closure)
                 (const BotDisconnectResp *message,
                  void *closure_data);
typedef void (*LizardConnectReq_Closure)
                 (const LizardConnectReq *message,
                  void *closure_data);
typedef void (*LizardConnectResp_Closure)
                 (const LizardConnectResp *message,
                  void *closure_data);
typedef void (*LizardMovementReq_Closure)
                 (const LizardMovementReq *message,
                  void *closure_data);
typedef void (*LizardMovementResp_Closure)
                 (const LizardMovementResp *message,
                  void *closure_data);
typedef void (*LizardDisconnectReq_Closure)
                 (const LizardDisconnectReq *message,
                  void *closure_data);
typedef void (*LizardDisconnectResp_Closure)
                 (const LizardDisconnectResp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    direction__descriptor;
extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCEnumDescriptor    client_type__descriptor;
extern const ProtobufCEnumDescriptor    response__descriptor;
extern const ProtobufCMessageDescriptor header__message__descriptor;
extern const ProtobufCMessageDescriptor proto__display__message__descriptor;
extern const ProtobufCMessageDescriptor roach__connect__req__descriptor;
extern const ProtobufCMessageDescriptor wasp__connect__req__descriptor;
extern const ProtobufCMessageDescriptor bot__connect__resp__descriptor;
extern const ProtobufCMessageDescriptor bot__movement__req__descriptor;
extern const ProtobufCMessageDescriptor bot__movement__resp__descriptor;
extern const ProtobufCMessageDescriptor bot__disconnect__req__descriptor;
extern const ProtobufCMessageDescriptor bot__disconnect__resp__descriptor;
extern const ProtobufCMessageDescriptor lizard__connect__req__descriptor;
extern const ProtobufCMessageDescriptor lizard__connect__resp__descriptor;
extern const ProtobufCMessageDescriptor lizard__movement__req__descriptor;
extern const ProtobufCMessageDescriptor lizard__movement__resp__descriptor;
extern const ProtobufCMessageDescriptor lizard__disconnect__req__descriptor;
extern const ProtobufCMessageDescriptor lizard__disconnect__resp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_client_5fserver_2eproto__INCLUDED */
